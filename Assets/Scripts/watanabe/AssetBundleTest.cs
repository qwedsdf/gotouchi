using System;
using System.Collections;
using AutoyaFramework;
using AutoyaFramework.AssetBundles;
using AutoyaFramework.Settings.AssetBundles;
using UnityEngine;

public class AssetBundleTest : MonoBehaviour
{

    IEnumerator Start()
    {
        // need to wait finish authentication.
        while (!Autoya.Auth_IsAuthenticated())
        {
            yield return null;
        }

        /*
			Autoya manages whole assetBundle information as the "AssetBundleList".
			latest file is located at url that is generated by
				OverridePoints.OnAssetBundleListDownloadUrlRequired method.
				
		 */
        Autoya.AssetBundle_DownloadAssetBundleListsIfNeed(
            (status) =>
            {
                Debug.Log("assetBundleList download succeeded. status:" + status);

                /*
					then, you can load asset from web.
						
					assetBundleList has the information which asset is contained by specific assetBundle.
						(asset <-containes-- assetBundle <-info contains-- assetBundleList)
					the downloaded assetBundleList is stored in device. you can set the location and the way of read/write the list via OverridePoints.cs.
				*/

                /*
					load asset from web or cache.
					automatically download bundle then load asset on memory.
				*/
                Autoya.AssetBundle_LoadAsset<GameObject>(
                    "Assets/Test/unitychan.prefab",
                    (assetName, prefab) =>
                    {
                        Debug.Log("asset:" + assetName + " is successfully loaded as:" + prefab);

                        // instantiate asset.
                        Instantiate(prefab);
                    },
                    (assetName, err, reason, autoyaStatus) =>
                    {
                        Debug.LogError("failed to load assetName:" + assetName + " err:" + err + " reason:" + reason + " autoyaStatus:" + autoyaStatus);
                    }
                );
            },
            (code, reason, autoyaStatus) =>
            {
                Debug.LogError("failed to download assetBundleList from OverridePoints.AssetBundleListDownloadUrl() supplied url. code:" + code + " reason:" + reason);
            }
        );
    }

    void OnApplicationQuit()
    {
        Autoya.AssetBundle_FactoryReset(
            () =>
            {
                Debug.Log("succeeded to factory reset AssetBundles.");
            },
            (error, reason) =>
            {
                Debug.Log("failed to factory reset AssetBundles. error:" + error + " reason:" + reason);
            }
        );
    }

}